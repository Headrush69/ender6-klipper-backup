# This file contains common pin mappings for the BigTreeTech Octopus
# (non-Pro) boards.

# Important! Do not use this config with an Octopus Pro v1.1 board as
# doing so could result in a heater being inadvertently enabled.

# To use this config, start by identifying the micro-controller on the
# board - it may be an STM32F446, or STM32F429.  Select the
# appropriate micro-controller in "make menuconfig" and select "Enable
# low-level configuration options". For STM32F446 boards the firmware
# should be compiled with a "32KiB bootloader" and a "12MHz crystal"
# clock reference. For STM32F429 boards use a "32KiB bootloader" and
# an "8MHz crystal".

# See docs/Config_Reference.md for a description of parameters.

[include adxl.cfg]
[include shell_command.cfg]
[include mainsail.cfg]
[include macros.cfg]
[include stealthburner_leds.cfg]
[include K-ShakeTune/*.cfg]

# Driver0 - Stepper X/B
[stepper_x]
step_pin: PF13
dir_pin: PF12
enable_pin: !PF14
full_steps_per_rotation: 400
microsteps: 16
rotation_distance: 40
endstop_pin: !BTT_EBB36: PB6
position_endstop: 304
position_max: 304
position_min: -10
homing_speed: 50

# Driver1 - Stepper Y/A
[stepper_y]
step_pin: PG0
dir_pin: PG1
enable_pin: !PF15
full_steps_per_rotation: 400
microsteps: 16
rotation_distance: 40
endstop_pin: PG6
position_endstop: 282
position_max: 282
position_min: 0
homing_speed: 50

# Driver2 - Stepper Z1
[stepper_z]
step_pin: PF11
dir_pin: !PG3
enable_pin: !PG5
microsteps: 16
rotation_distance: 8
endstop_pin: probe:z_virtual_endstop
position_min: -10
position_max: 250

# Driver on SB2209
[extruder]
step_pin: BTT_EBB36: PD0
dir_pin: BTT_EBB36: PD1
enable_pin: !BTT_EBB36: PD2
microsteps: 16
rotation_distance: 7.82
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: BTT_EBB36: PB13
sensor_type: ATC Semitec 104NT-4-R025H42G
sensor_pin: BTT_EBB36: PA3
control: pid
pid_Kp: 22.2
pid_Ki: 1.08
pid_Kd: 114
min_temp: 0
max_temp: 300
gear_ratio: 50:10
pressure_advance: 0.02
min_extrude_temp: 20
#max_extrude_only_distance: 500
#max_extrude_cross_section: 5.0

[heater_bed]
heater_pin: PA1
sensor_pin: PF3 # TB
sensor_type: ATC Semitec 104GT-2
control: watermark
min_temp: 0
max_temp: 130

[fan]
pin: BTT_EBB36: PA0

[heater_fan hotend_fan]
pin: BTT_EBB36: PA1
heater: extruder
heater_temp: 50.0

[fan_generic Electronics_Fan]
pin: PA8
cycle_time: 0.01

[fan_generic Power_Supply_Fan]
pin: PE5
cycle_time: 0.01

[temperature_sensor BTT_EBB36]
sensor_type: temperature_mcu
sensor_mcu: BTT_EBB36
min_temp: 0
max_temp: 100

## TEMPERATURE SENSOR OVER THE CANBOARD
[temperature_sensor BTT_Octopus]
sensor_type: temperature_mcu
sensor_mcu: mcu
min_temp: 0
max_temp: 100

[temperature_fan BTT_Pi]
pin: BTTPi:gpio211
kick_start_time: 0.8
#shutdown_speed: 0
off_below: 0.1
max_power: 1.0
#fan_speed: 0.6
sensor_type: temperature_host
control: pid
min_temp: 0
max_temp: 85
#max_delta: 5.0
pid_kp: 1.0
pid_ki: 0.5
pid_kd: 2.0
min_speed: 0.1
max_speed: 0.6
target_temp: 25

[temperature_sensor Top_of_Chamber]
sensor_type: Generic 3950
sensor_pin: PF4

[temperature_sensor Bottom_of_Chamber]
sensor_type: Generic 3950
sensor_pin: PF5

[filament_switch_sensor my_sensor]
switch_pin: PB10

#[neopixel my_neopixel]
#pin: PB0

[menu __main __octoprint]
type: disabled

[exclude_object]

[virtual_sdcard]
path: /home/biqu/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_2E0010000750535556323420-if00  #usb-Klipper_stm32f446xx_2E0010000750535556323420-if00
restart_method: command

[mcu BTTPi]
serial: /tmp/klipper_host_mcu

# BTT EBB36 on toolhead
[mcu BTT_EBB36]
canbus_uuid: df0e7d760da0

[mcu eddy]
serial: /dev/serial/by-id/usb-Klipper_rp2040_50443403107C8D1C-if00 # This is the serial address of your eddy probe. This can be found by using the terminal of your klipper instance (typically through SSH) and using the command ```ls /dev/serial/by-id``` 
restart_method: command

[temperature_sensor btt_eddy_mcu]
sensor_type: temperature_mcu # Sets the type of sensor for Klipper to read
sensor_mcu: eddy # Sets the MCU of the eddy probe tempereature sensor
min_temp: 10 # Sets the minimum tempereature for eddys tempereature sensor to operate
max_temp: 100 # Sets the maximum tempereature for eddys tempereature sensor to operate

[probe_eddy_current btt_eddy]
sensor_type: ldc1612
z_offset: 2.5
#i2c_address:
i2c_mcu: eddy  # This value is good for the Eddy USB but would need to be adjusted for the Eddy Coil according to the MCU you have used.
i2c_bus: i2c0f # This value is good for the Eddy USB but would need to be adjusted for the Eddy Coil according to the I2C bus you have used.
# Measure the offsets below using the method described here: https://www.klipper3d.org/Probe_Calibrate.html#calibrating-probe-x-and-y-offsets
# For a standard Voron stealthburner X carriage mount there should be no need to change the defaults below.
x_offset: 0
y_offset: 21.42

# This section is only relevant for Eddy USB. Comment it out for Eddy Coil.
[temperature_probe btt_eddy]
sensor_type: Generic 3950
sensor_pin: eddy:gpio26
horizontal_move_z: 2

[bed_mesh]
horizontal_move_z: 2
speed: 200
# For the mesh dimensions below, the coordinates need to be reachable by the center of the probe. To calculate coordinates that will work, use the formula below:
# mesh x min = position_min_x + greater_of (15mm or x_offset) <--- in this term, only consider the x offset if it is positive, ignore if negative.
# mesh y min = position_min_y + greater_of (15mm or y_offset) <--- in this term, only consider the y offset if it is positive, ignore if negative.
# mesh x max = position_max_x - greater_of (15mm or |x_offset|) <--- in this term, only consider the x offset if it is negative, ignore if positive.
# mesh y max = position_max_y - greater_of (15mm or |y_offset|) <--- in this term, only consider the y offset if it is negative, ignore if positive.
# Example: Consider that you have a 300 x 300 bed with the max x and y positions being 300 and the min being 0. Your probe offsets are -20 for X and 10 for Y
# For mesh x min we ignore the x offset term because it is negative. Therefore mesh x min = 15
# For mesh y min we do not ignore the y offset term because it is positive but it is less than 15 so we use 15. Therefore mesh y min = 15
# For mesh x max we do not ignore the x offset term because it is negative. It is also greater than 15. Therefore mesh x max = 280
# For mesh y max we ignore the y offset term because it is positive but it is less than 15 so we use 15. Therefore mesh y max = 285
# The final result would be mesh_min: 15, 15 mesh_max: 280, 285
mesh_min: 10, 10  # modify these according to the above guide. If the probe cannot reach then you will get a klipper error when trying to scan a bed mesh.
mesh_max: 220, 220 # modify these according to the above guide. If the probe cannot reach then you will get a klipper error when trying to scan a bed mesh.
probe_count: 9, 9
algorithm: bicubic
scan_overshoot: 8  #uncomment this section if you still have room left over on the X axis for some scan overshoot to product smoother movements and more accurate scanning. Uncommenting this should be fine if you are using a standard voron mount.

# Uncomment this if you are using Eddy as the probe AND the homing endstop
[safe_z_home]
home_xy_position: 150, 150 # Choose an X,Y position that is in the center of your bed. For a 300x300 machine that will be 150, 150. Use the same principle to calculate your bed center.
z_hop: 10
z_hop_speed: 25
speed: 200

[printer]
kinematics: corexy
max_velocity: 300
max_accel: 10000
max_z_velocity: 5
max_z_accel: 100

########################################
# TMC2209 configuration
########################################

[tmc2209 stepper_x]
uart_pin: PC4
run_current: 0.800
##diag_pin: PG6
#stealthchop_threshold: 999999

[tmc2209 stepper_y]
uart_pin: PD11
##diag_pin: PG10
run_current: 0.800
#stealthchop_threshold: 999999

[tmc2209 stepper_z]
uart_pin: PC6
run_current: 0.650
#stealthchop_threshold: 999999

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=PC5

[display]
lcd_type: st7920
cs_pin: EXP1_7
sclk_pin: EXP1_6
sid_pin: EXP1_8
encoder_pins: ^EXP1_5, ^EXP1_3
click_pin: ^!EXP1_2

[output_pin beeper]
pin: EXP1_1

[screws_tilt_adjust]
screw1: -5, 213
screw1_name: back left screw
screw2: -5, 22
screw2_name: front left screw
screw3: 185, 22
screw3_name: front right screw
screw4: 185, 213
screw4_name: back right screw
horizontal_move_z: 10
speed: 50
screw_thread: CW-M4

[shaketune]
# result_folder: ~/printer_data/config/ShakeTune_results
#    The folder where the results will be stored. It will be created if it doesn't exist.
# number_of_results_to_keep: 3
#    The number of results to keep in the result_folder. The oldest results will
#    be automatically deleted after each runs.
# keep_raw_csv: False
#    If True, the raw CSV files will be kept in the result_folder alongside the
#    PNG graphs. If False, they will be deleted and only the graphs will be kept.
# show_macros_in_webui: True
#    Mainsail and Fluidd doesn't create buttons for "system" macros that are not in the
#    printer.cfg file. If you want to see the macros in the webui, set this to True.
# timeout: 300
#    The maximum time in seconds to let Shake&Tune process the CSV files and generate the graphs.

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.

#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 33.186
#*# pid_ki = 4.609
#*# pid_kd = 59.737
#*#
#*# [heater_bed]
#*# pid_kp = 64.270
#*# pid_ki = 0.758
#*# pid_kd = 1361.723
